#=== QUARKUS ===
quarkus.http.port=8080
quarkus.http.root-path=/api
quarkus.http.non-application-root-path=/q
quarkus.log.level=INFO
#=== OPENAPI ===
quarkus.smallrye-openapi.servers=http://localhost:8080
quarkus.smallrye-openapi.info-title=Order API
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.filter=true
#=== DATABASE ===
quarkus.datasource.metrics.enabled=true
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=
quarkus.datasource.password=
quarkus.datasource.jdbc.url=
quarkus.datasource.jdbc.driver=org.postgresql.Driver
quarkus.datasource.jdbc.min-size=0
quarkus.datasource.jdbc.max-size=50
quarkus.datasource.jdbc.enable-metrics=true
quarkus.hibernate-orm.packages=id.labstech.order.model
quarkus.hibernate-orm.database.default-schema=order_schema
quarkus.hibernate-orm.database.generation=none
#=== KONG ===
kong.app.name=
kong.app.redirect.uris=
kong.url=
kong.url.admin=
kong.consumer.path=/consumers/
kong.oauth2.token.path=/oauth2/token
kong.integration-endpoint=
kong.provision.key=
#=== Core-Service ===
quarkus.rest-client."id.labstech.order.client.CoreServiceClient".url=
quarkus.rest-client."id.labstech.order.client.CoreServiceClient".scope=javax.inject.Singleton
#=== Loyalty-Service ===
quarkus.rest-client."id.labstech.order.client.LoyaltyServiceClient".url=
quarkus.rest-client."id.labstech.order.client.LoyaltyServiceClient".scope=javax.inject.Singleton
#=== User-Service ===
quarkus.rest-client."id.labstech.order.client.UserServiceClient".url=
quarkus.rest-client."id.labstech.order.client.UserServiceClient".scope=javax.inject.Singleton
#=== Storage-Service ===
quarkus.rest-client."id.labstech.order.client.StorageServiceClient".url=
quarkus.rest-client."id.labstech.order.client.StorageServiceClient".scope=javax.inject.Singleton

#== Scheduler ===
scheduler.take-away.swiper.every.seconds=1800s
scheduler.delivery.tracking.every.seconds=60s
scheduler.sync.hanging.trans-id.every.seconds=1800s
scheduler.sync.hanging.trans-id.cancelled.every.seconds=1800s
scheduler.sync.hanging.trans-id.back.date.every.seconds=1800s
scheduler.send.req.validate.payment.dine-in.every.seconds=10s
scheduler.sync.payment.status.pending.delivery.every.seconds=60s
scheduler.process-post-transaction.every.seconds=300s
scheduler.logging.delivery.every.seconds=900s
scheduler.take-away.tracking.every.seconds=300s
scheduler.product.ranking=0 30 4 * * ?
scheduler.product.ranking.core=0 45 4 * * ?

#=== callback url ===
callback.returnUrl =

#=== Url fooma playStore ===
url.fooma.playstore =

#==== API Create Voucher ====
esb.base-url.create-voucher=
esb.token.create-voucher.ismaya=
esb.token.create-voucher.legit=

#==== Export Configure ====
export.max.limit=10000

#== Default Payment Method ==
default.payment-method.ismaya=ovo88
default.payment-method.legit=ovo

#=== Base URL Outlet ====
backoffice.outlet.base.url=http://core-backoffice-service.outlet:8080/
outlet.base.url=http://order-pos-service.outlet:8080/

#== Other ==
tracking.notification.new-driver.pick-up=true
tracking.notification.simple.message.type=true
tracking.driver.incentive.amount=500
event.base.url=http://event-service:8080/
fooma.call-center=+62 817-831-363

#=== KAFKA CONFIG ===
#======================Producer===============================
namespace=default

mp.messaging.outgoing.req-validate-payment-out.topic=${namespace}-req-validate-payment
mp.messaging.outgoing.req-validate-payment-out.connector = smallrye-kafka
mp.messaging.outgoing.req-validate-payment-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.complete-transaction-out.topic=${namespace}-complete-transaction
mp.messaging.outgoing.complete-transaction-out.connector=smallrye-kafka
mp.messaging.outgoing.complete-transaction-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.complete-transaction-out.merge=true

mp.messaging.outgoing.push-notification-out.topic=${namespace}-push-notification
mp.messaging.outgoing.push-notification-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.push-notification-out.connector=smallrye-kafka

mp.messaging.outgoing.send-whatsapp-receipt-out.topic=${namespace}-send-whatsapp-receipt
mp.messaging.outgoing.send-whatsapp-receipt-out.connector=smallrye-kafka
mp.messaging.outgoing.send-whatsapp-receipt-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.save-order-used-coin-out.topic=${namespace}-save-order-used-coin
mp.messaging.outgoing.save-order-used-coin-out.connector=smallrye-kafka
mp.messaging.outgoing.save-order-used-coin-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.save-order-used-coin-out.merge=true

mp.messaging.outgoing.payment-settlement-delivery-out.topic=${namespace}-payment-settlement-delivery
mp.messaging.outgoing.payment-settlement-delivery-out.connector=smallrye-kafka
mp.messaging.outgoing.payment-settlement-delivery-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.upsert-product-ranking-out.topic=${namespace}-upsert-product-ranking
mp.messaging.outgoing.upsert-product-ranking-out.connector=smallrye-kafka
mp.messaging.outgoing.upsert-product-ranking-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.send-simple-whatsapp-driver-pickup-out.topic=${namespace}-send-simple-whatsapp-driver-pickup
mp.messaging.outgoing.send-simple-whatsapp-driver-pickup-out.connector=smallrye-kafka
mp.messaging.outgoing.send-simple-whatsapp-driver-pickup-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.send-whatsapp-driver-pickup-out.topic=${namespace}-send-whatsapp-driver-pickup
mp.messaging.outgoing.send-whatsapp-driver-pickup-out.connector=smallrye-kafka
mp.messaging.outgoing.send-whatsapp-driver-pickup-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.outlet-update-fooma-order-received-out.topic=outlet-update-fooma-order-received
mp.messaging.outgoing.outlet-update-fooma-order-received-out.connector=smallrye-kafka
mp.messaging.outgoing.outlet-update-fooma-order-received-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

quarkus.cache.caffeine."menuPerformance".expire-after-write=1440M
quarkus.cache.caffeine."userHistory".expire-after-write=1440M

schedule.status=disable



#===== Local Config ====
quarkus.hibernate-orm.database.default-schema=order_schema
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres

# quarkus.datasource.jdbc.url=jdbc:postgresql://ep-floral-snow-134839.ap-southeast-1.aws.neon.tech/farid
# quarkus.datasource.username=faridsatria24
# quarkus.datasource.password=IxqwyvX18ZmB

quarkus.hibernate-orm.database.generation=update
# quarkus.hibernate-orm.log.sql=true
quarkus.http.port=7081
quarkus.smallrye-openapi.servers=http://localhost:7081

kafka.bootstrap.servers=localhost:9092
#=== Core-Service ===
quarkus.rest-client."id.labstech.order.client.CoreServiceClient".url=http://localhost:8080/
quarkus.rest-client."id.labstech.order.client.CoreServiceClient".scope=javax.inject.Singleton
#=== User-Service ===
quarkus.rest-client."id.labstech.order.client.UserServiceClient".url=http://localhost:8082/
quarkus.rest-client."id.labstech.order.client.UserServiceClient".scope=javax.inject.Singleton
#=== BackOffice User-Service ===
quarkus.rest-client."id.labstech.order.client.BackOfficeUserServiceClient".url=http://localhost:8082/
quarkus.rest-client."id.labstech.order.client.BackOfficeUserServiceClient".scope=javax.inject.Singleton
#=== Loyalty-Service ===
quarkus.rest-client."id.labstech.order.client.LoyaltyServiceClient".url=http://localhost:7083/
quarkus.rest-client."id.labstech.order.client.LoyaltyServiceClient".scope=javax.inject.Singleton


backoffice.outlet.base.url=https://backoffice.labstech.asia/
outlet.base.url=https://pos.labstech.asia/
event.base.url=http://localhost:7085/

pin.length=6
esb.base-url.create-voucher="tes"
esb.token.create-voucher="tes"
header.customId={\"userId\":\"dda57c38-e924-4aad-bd39-a230362ebe59\",\"memberCode\":\"4HYVDYVC\", \"email\":\"someone@example.com\",\"isEmailVerified\":true,\"mobilePhoneNumber\":\"+6289123123123\",\"isMobilePhoneNumberVerified\":false,\"name\":\"JohnDoe\",\"gender\":\"M\",\"dob\":\"1990-01-01\",\"deviceId\":\"29bb623e-ede9-4d24-9123-870d779a13fd\"}
#318598a2-bedf-4734-84db-699ea68e4629