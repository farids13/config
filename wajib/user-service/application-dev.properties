#=== QUARKUS ===
quarkus.http.port=8080
quarkus.http.root-path=/api
quarkus.http.non-application-root-path=/q
quarkus.log.level=INFO
#=== OPENAPI ===
quarkus.smallrye-openapi.servers=http://localhost:8080
quarkus.smallrye-openapi.info-title=User API
quarkus.swagger-ui.always-include=true
#=== DATABASE ===
quarkus.datasource.metrics.enabled=true
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.driver=org.postgresql.Driver
quarkus.datasource.jdbc.min-size=0
quarkus.datasource.jdbc.max-size=50
quarkus.datasource.jdbc.enable-metrics=true
quarkus.hibernate-orm.packages=id.labstech.user.model
quarkus.hibernate-orm.database.generation=none
#=== KONG ===
kong.app.name=
kong.app.redirect.uris=
kong.url=
kong.url.admin=
kong.consumer.path=/consumers/
kong.oauth2.token.path=/oauth2/token
kong.integration-endpoint=
kong.provision.key=
#=== OTP ===
quarkus.rest-client."id.labstech.user.client.OtpServiceClient".url=
quarkus.rest-client."id.labstech.user.client.OtpServiceClient".scope=javax.inject.Singleton

#=== CORE SERVICE =====
quarkus.rest-client."id.labstech.user.client.CoreServiceClient".url=
quarkus.rest-client."id.labstech.user.client.CoreServiceClient".scope=javax.inject.Singleton

#==== ORDER SERVICE ====
quarkus.rest-client."id.labstech.user.client.OrderServiceClient".url=
quarkus.rest-client."id.labstech.user.client.OrderServiceClient".scope=javax.inject.Singleton

#==== LOYALTY SERVICE ====
quarkus.rest-client."id.labstech.user.client.LoyaltyServiceClient".url=
quarkus.rest-client."id.labstech.user.client.LoyaltyServiceClient".scope=javax.inject.Singleton

#==== BCRYPT SERVICE ====
bcrypt.url=

#=== LOGIN ===
login.excessive.in.minutes=1
login.excessive.threshold=5
login.block.in.minutes=15
login.social-login.auto-register=false
#=== PIN ===
pin.length=6
#=== OTHERS ===
no-avatar.url=
avatar.regex=
storage.service.imports.url=
tag.name.subscriber.notification=SUBSCRIBER_FOOMA_001
export.max.limit=10000


#=== KAFKA CONFIG ===
namespace=default
mp.messaging.outgoing.created-user-out.topic=${namespace}-created-user
mp.messaging.outgoing.created-user-out.connector=smallrye-kafka
mp.messaging.outgoing.created-user-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.created-user-out.merge=true

mp.messaging.outgoing.updated-user-out.topic=${namespace}-updated-user
mp.messaging.outgoing.updated-user-out.connector=smallrye-kafka
mp.messaging.outgoing.updated-user-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.push-notification-out.topic=${namespace}-push-notification
mp.messaging.outgoing.push-notification-out.connector=smallrye-kafka
mp.messaging.outgoing.push-notification-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.partnership-update-customer-group-id-out.topic=${namespace}-partnership-update-customer-group-id
mp.messaging.outgoing.partnership-update-customer-group-id-out.connector=smallrye-kafka
mp.messaging.outgoing.partnership-update-customer-group-id-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.partnership-update-member-code-out.topic=${namespace}-partnership-update-member-code
mp.messaging.outgoing.partnership-update-member-code-out.connector=smallrye-kafka
mp.messaging.outgoing.partnership-update-member-code-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.created-membership-in.topic=${namespace}-created-membership
mp.messaging.incoming.created-membership-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.created-membership-in.connector=smallrye-kafka
mp.messaging.incoming.created-membership-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.created-membership-in.dead-letter-queue.topic=${namespace}-created-membership-dlq

mp.messaging.incoming.updated-membership-in.topic=${namespace}-updated-membership
mp.messaging.incoming.updated-membership-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.updated-membership-in.connector=smallrye-kafka
mp.messaging.incoming.updated-membership-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.updated-membership-in.dead-letter-queue.topic=${namespace}-updated-membership-dlq

mp.messaging.incoming.create-user-in.topic=${namespace}-create-user
mp.messaging.incoming.create-user-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.create-user-in.connector=smallrye-kafka
mp.messaging.incoming.create-user-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.create-user-in.dead-letter-queue.topic=${namespace}-create-user-dlq

mp.messaging.incoming.partnership-insert-customer-group-in.topic=${namespace}-partnership-insert-customer-group
mp.messaging.incoming.partnership-insert-customer-group-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.partnership-insert-customer-group-in.connector=smallrye-kafka
mp.messaging.incoming.partnership-insert-customer-group-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.partnership-insert-customer-group-in.dead-letter-queue.topic=${namespace}-partnership-insert-customer-group-dlq

mp.messaging.incoming.partnership-update-customer-group-in.topic=${namespace}-partnership-update-customer-group
mp.messaging.incoming.partnership-update-customer-group-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.partnership-update-customer-group-in.connector=smallrye-kafka
mp.messaging.incoming.partnership-update-customer-group-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.partnership-update-customer-group-in.dead-letter-queue.topic=${namespace}-partnership-update-customer-group-dlq

mp.messaging.incoming.partnership-insert-user-in.topic=${namespace}-partnership-insert-user
mp.messaging.incoming.partnership-insert-user-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.partnership-insert-user-in.connector=smallrye-kafka
mp.messaging.incoming.partnership-insert-user-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.partnership-insert-user-in.dead-letter-queue.topic=${namespace}-partnership-insert-user-dlq

mp.messaging.incoming.partnership-delete-user-in.topic=${namespace}-partnership-delete-user
mp.messaging.incoming.partnership-delete-user-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.partnership-delete-user-in.connector=smallrye-kafka
mp.messaging.incoming.partnership-delete-user-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.partnership-delete-user-in.dead-letter-queue.topic=${namespace}-partnership-delete-user-dlq


mp.messaging.incoming.complete-transaction-in.topic=${namespace}-complete-transaction
mp.messaging.incoming.complete-transaction-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.complete-transaction-in.connector=smallrye-kafka
mp.messaging.incoming.complete-transaction-in.failure-strategy=dead-letter-queue
mp.messaging.incoming.complete-transaction-in.dead-letter-queue.topic=${namespace}-complete-transaction-dlq


#===== Local Config ====

%dev.quarkus.hibernate-orm.database.default-schema=user_schema
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres
%dev.quarkus.datasource.username=postgres
%dev.quarkus.datasource.password=postgres

# %dev.quarkus.datasource.jdbc.url=jdbc:postgresql://ep-floral-snow-134839.ap-southeast-1.aws.neon.tech/farid
# %dev.quarkus.datasource.username=faridsatria24
# %dev.quarkus.datasource.password=IxqwyvX18ZmB

%dev.quarkus.hibernate-orm.database.generation=update
# %dev.quarkus.http.host=0.0.0.0
%dev.quarkus.http.port=8082
%dev.quarkus.smallrye-openapi.servers=http://localhost:8082
# %dev.quarkus.hibernate-orm.log.sql=true
%dev.kafka.bootstrap.servers=localhost:9092

%dev.quarkus.rest-client."id.labstech.user.client.CoreServiceClient".url=http://localhost:7080/
%dev.quarkus.rest-client."id.labstech.user.client.CoreServiceClient".scope=javax.inject.Singleton

%dev.quarkus.rest-client."id.labstech.user.client.OrderServiceClient".url=http://localhost:7081/
%dev.quarkus.rest-client."id.labstech.user.client.OrderServiceClient".scope=javax.inject.Singleton

%dev.quarkus.rest-client."id.labstech.user.client.LoyaltyServiceClient".url=http://localhost:7083/
%dev.quarkus.rest-client."id.labstech.user.client.LoyaltyServiceClient".scope=javax.inject.Singleton

# %dev.token.backoffice=LQgLMDRf959vvjHXvbnKf1MtdWjId6Sy

%dev.storage.service.imports.url=https://assets.labstech.asia/files/

%dev.pin.length=6
%dev.header.customId={\"userId\":\"b82f89a7-6dc5-43b7-9f32-f98ae728b5a1\",\"email\":\"someone@example.com\",\"isEmailVerified\":true,\"mobilePhoneNumber\":null,\"isMobilePhoneNumberVerified\":false,\"name\":\"JohnDoe\",\"gender\":\"M\",\"dob\":\"1990-01-01\",\"deviceId\":\"29bb623e-ede9-4d24-9123-870d779a13fd\"}


